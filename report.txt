FUNCTIONALITY: Satisfactory
Well done!

DESIGN: Progressing
* Check the return values from all calls to waitpid to detect errors
* Code has memory leaks

gcc -c -o shell.o shell.c -I. -g -Wall --std=gnu11 -fpic
gcc -o shell shell.o 
=== FUNCTIONALITY ==============================================================

=== Command runs in a separate process =========================================
Command(s) run:
/usr/bin/ps

    PID TTY          TIME CMD
 182016 pts/1    00:00:02 bash
 182887 pts/1    00:00:00 bash
 184911 pts/1    00:00:00 repo.sh
 184924 pts/1    00:00:00 assess.sh
 184952 pts/1    00:00:00 01d.sh
 184957 pts/1    00:00:00 shell
 184958 pts/1    00:00:00 tee
 184959 pts/1    00:00:00 ps

=== PASS =======================================================================

=== Foreground command without arguments correctly executed ====================
Command(s) run:
/usr/bin/date

Fri Apr 26 07:38:40 EDT 2024

=== PASS =======================================================================

=== Foreground command with arguments correctly executed =======================
Command(s) run:
/usr/bin/date --version

date (GNU coreutils) 8.32
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by David MacKenzie.

=== PASS =======================================================================

=== Waits for foreground command to complete ===================================
Command(s) run:
/bin/sleep 5

spawn /home/student/current-semester/projects/shell/grading/tests/../repo/shell
shell> /bin/sleep 5
=== PASS =======================================================================

=== Waits for current foreground command =======================================
spawn /home/student/current-semester/projects/shell/grading/tests/../repo/shell
shell> /bin/sleep 2 &
Process 185041 started
shell> /bin/sleep 5
=== PASS =======================================================================

=== Background command without arguments correctly executed ====================
spawn /home/student/current-semester/projects/shell/grading/tests/../repo/shell
shell> /usr/bin/ps &
Process 185063 started
shell>     PID TTY          TIME CMD
 185059 pts/0    00:00:00 shell
=== PASS =======================================================================

=== Background command with arguments correctly executed =======================
spawn /home/student/current-semester/projects/shell/grading/tests/../repo/shell
shell> /bin/sleep 9 &
Process 185084 started
shell> === PASS =======================================================================

=== Accepts commands immediately after background command ======================
spawn /home/student/current-semester/projects/shell/grading/tests/../repo/shell
shell> /bin/sleep 8 &
Process 185108 started
shell> /usr/bin/ps
    PID TTY          TIME CMD
 185104 pts/0    00:00:00 shell
=== PASS =======================================================================

=== No zombies are left from background processes ==============================
spawn /home/student/current-semester/projects/shell/grading/tests/../repo/shell
shell> /usr/bin/date &
Process 185132 started
shell> /usr/bin/sleep 1
Fri Apr 26 07:38:44 EDT 2024
shell> /usr/bin/ps
Process 185132 finished
    PID TTY          TIME CMD
 185128 pts/0    00:00:00 shell
 185134 pts/0    00:00:00 ps
shell> === PASS =======================================================================

=== Non-existent command results in error message ==============================
Command(s) run:
/bin/invalid

command not found: No such file or directory

=== PASS =======================================================================

=== Child process is terminated when execv fails ===============================
Command(s) run:
/bin/invalid
/usr/bin/ps

command not found: No such file or directory
    PID TTY          TIME CMD
 182016 pts/1    00:00:02 bash
 182887 pts/1    00:00:00 bash
 184911 pts/1    00:00:00 repo.sh
 184924 pts/1    00:00:00 assess.sh
 185163 pts/1    00:00:00 01g.sh
 185167 pts/1    00:00:00 shell
 185168 pts/1    00:00:00 tee
 185170 pts/1    00:00:00 ps

=== PASS =======================================================================

=== fg causes wait for background process ======================================
spawn /home/student/current-semester/projects/shell/grading/tests/../repo/shell
shell> /bin/sleep 5 &
Process 185195 started
shell> fg
=== PASS =======================================================================

=== fg causes wait for background (not foreground) process =====================
spawn /home/student/current-semester/projects/shell/grading/tests/../repo/shell
shell> /bin/sleep 5 &
Process 185216 started
shell> /usr/bin/ps
    PID TTY          TIME CMD
 185212 pts/0    00:00:00 shell
 185216 pts/0    00:00:00 sleep
 185217 pts/0    00:00:00 ps
shell> fg
=== PASS =======================================================================

=== fg waits for most recent background process ================================
spawn /home/student/current-semester/projects/shell/grading/tests/../repo/shell
shell> /bin/sleep 20 &
Process 185238 started
shell> /bin/sleep 4 & 
Process 185239 started
shell> fg
shell> === PASS =======================================================================

=== multiple fg wait for background processes in order =========================
spawn /home/student/current-semester/projects/shell/grading/tests/../repo/shell
shell> /bin/sleep 12 &
Process 185260 started
shell> /bin/sleep 4 & 
Process 185261 started
shell> fg
shell> fg
=== PASS =======================================================================

=== test.sh ====================================================================
/usr/bin/ls
/usr/bin/ls -o
man execv
chmod --help
/usr/bin/ps
git 
/usr/bin/ls -l

=== MANUAL =====================================================================

=== test2.sh ===================================================================
/usr/bin/sleep 2 &
/usr/bin/ps -l -r & 
fg
/usr/bin/sleep 2 
/usr/bin/echo Please give us a good grade :)
/usr/bin/ls -a
git --help
git status


=== MANUAL =====================================================================

=== DESIGN =====================================================================

=== Return values for system calls are checked =================================
fork(
--
        pid_t pid = fork();
        if (pid == 0) { //if child process, execute
            if (execvp(command[0], command) < 0) {
                perror("command not found");
                exit(EXIT_FAILURE);
---------------------------
execv(
--
---------------------------
waitpid(
--
    waitpid(pid, &status, 0); //moves most recent background process to foreground
    *fg_pid = -1; // Reset fg_pid after the process is moved to the foreground
}

//checks if a background has finished, and if so prints a message
--
    while ((finished_pid = waitpid(-1, &status, WNOHANG)) > 0) { //if process has finished, print message and reap
        printf("Process %d finished\n", finished_pid);
        for (int i = 0; i < *back_pids_ind; i++) {
            if (back_pids[i] == finished_pid) { //remove pid from array of background pids
                for (int j = i + 1; j < *back_pids_ind; j++) {
--
                waitpid(pid, NULL, 0);
            } else {
                // Background process
                if (*back_pids_ind < MAX_BACKGROUND_PROCESSES) {
                    back_pids[(*back_pids_ind)++] = pid;
=== MANUAL =====================================================================

=== Compiles without warnings ==================================================
=== PASS =======================================================================

=== No memory errors ===========================================================
==185404== Memcheck, a memory error detector
==185404== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==185404== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==185404== Command: /home/student/current-semester/projects/shell/grading/tests/../repo/shell
==185404== 
    PID TTY          TIME CMD
 182016 pts/1    00:00:02 bash
 182887 pts/1    00:00:00 bash
 184911 pts/1    00:00:00 repo.sh
 184924 pts/1    00:00:00 assess.sh
 185401 pts/1    00:00:00 03c.sh
 185404 pts/1    00:00:02 memcheck-arm64-
 185405 pts/1    00:00:00 tee
 185406 pts/1    00:00:00 grep
 185407 pts/1    00:00:00 03c.sh
 185408 pts/1    00:00:00 cat
 185409 pts/1    00:00:00 ps
Process 185410 started
==185404== 
==185404== HEAP SUMMARY:
==185404==     in use at exit: 2 bytes in 1 blocks
==185404==   total heap usage: 16 allocs, 15 frees, 8,340 bytes allocated
==185404== 
==185404== For a detailed leak analysis, rerun with: --leak-check=full
==185404== 
==185404== For lists of detected and suppressed errors, rerun with: -s
==185404== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==185404== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
=== PASS =======================================================================

=== No memory leaks ============================================================
==185423== Memcheck, a memory error detector
==185423== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==185423== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==185423== Command: /home/student/current-semester/projects/shell/grading/tests/../repo/shell
==185423== 
    PID TTY          TIME CMD
 182016 pts/1    00:00:02 bash
 182887 pts/1    00:00:00 bash
 184911 pts/1    00:00:00 repo.sh
 184924 pts/1    00:00:00 assess.sh
 185420 pts/1    00:00:00 03d.sh
 185423 pts/1    00:00:02 memcheck-arm64-
 185424 pts/1    00:00:00 tee
 185425 pts/1    00:00:00 grep
 185426 pts/1    00:00:00 03d.sh
 185427 pts/1    00:00:00 cat
 185428 pts/1    00:00:00 ps
Process 185429 started
==185423== 
==185423== HEAP SUMMARY:
==185423==     in use at exit: 2 bytes in 1 blocks
==185423==   total heap usage: 16 allocs, 15 frees, 8,340 bytes allocated
==185423== 
==185423== 2 bytes in 1 blocks are definitely lost in loss record 1 of 1
==185423==    at 0x4865058: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-arm64-linux.so)
==185423==    by 0x492051F: strdup (strdup.c:42)
==185423==    by 0x108E0F: tokenize (shell.c:79)
==185423==    by 0x108D1B: main (shell.c:39)
==185423== 
==185423== LEAK SUMMARY:
==185423==    definitely lost: 2 bytes in 1 blocks
==185423==    indirectly lost: 0 bytes in 0 blocks
==185423==      possibly lost: 0 bytes in 0 blocks
==185423==    still reachable: 0 bytes in 0 blocks
==185423==         suppressed: 0 bytes in 0 blocks
==185423== 
==185423== For lists of detected and suppressed errors, rerun with: -s
==185423== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
=== MISS =======================================================================

=== Uses multiple functions ====================================================
4 helper functions
=== PASS =======================================================================

